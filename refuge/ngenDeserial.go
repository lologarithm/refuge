// Code generated by netgen tool on Jul 17 2019 00:13 MDT. DO NOT EDIT
package refuge

import (
	"github.com/lologarithm/netgen/lib/ngen"
	"time"
)


var Context = &ngen.Context {
		FieldVersions: map[ngen.MessageType][]byte{
			
		},
		Read: Read,
	}
const (
	PortalMsgType = 201496262
	ThermostatMsgType = 4190559744
	ThermometerMsgType = 313615057
	MotionMsgType = 4065502430
	SwitchMsgType = 1749372462
	DeviceMsgType = 243512248
	SettingsMsgType = 473154195
	TempEventMsgType = 2360498257
)

// Read accepts input of raw bytes and a type. Parses and returns a message.
func Read(ctx *ngen.Context, msgType ngen.MessageType, content *ngen.Buffer) ngen.Message {
	switch msgType {
		case ngen.MessageTypeContext:
			return ngen.DeserializeContext(&ngen.Context{Read: Read}, content)
	case PortalMsgType:
			msg := DeserializePortal(ctx, content)
			return &msg
	case ThermostatMsgType:
			msg := DeserializeThermostat(ctx, content)
			return &msg
	case ThermometerMsgType:
			msg := DeserializeThermometer(ctx, content)
			return &msg
	case MotionMsgType:
			msg := DeserializeMotion(ctx, content)
			return &msg
	case SwitchMsgType:
			msg := DeserializeSwitch(ctx, content)
			return &msg
	case DeviceMsgType:
			msg := DeserializeDevice(ctx, content)
			return &msg
	case SettingsMsgType:
			msg := DeserializeSettings(ctx, content)
			return &msg
	case TempEventMsgType:
			msg := DeserializeTempEvent(ctx, content)
			return &msg

		default:
			return nil
	}
}

func DeserializePortal(ctx *ngen.Context, buffer *ngen.Buffer) (m Portal) {
	tmpState := buffer.ReadUint32()
	m.State = PortalState(tmpState)
	return m
}

func DeserializeThermostat(ctx *ngen.Context, buffer *ngen.Buffer) (m Thermostat) {
	tmpState := buffer.ReadUint32()
	m.State = ControlState(tmpState)
	m.Target = buffer.ReadFloat32()
	m.Settings = DeserializeSettings(ctx, buffer)
	return m
}

func DeserializeThermometer(ctx *ngen.Context, buffer *ngen.Buffer) (m Thermometer) {
	m.Temp = buffer.ReadFloat32()
	m.Humidity = buffer.ReadFloat32()
	return m
}

func DeserializeMotion(ctx *ngen.Context, buffer *ngen.Buffer) (m Motion) {
	m.Motion = buffer.ReadInt64()
	return m
}

func DeserializeSwitch(ctx *ngen.Context, buffer *ngen.Buffer) (m Switch) {
	m.On = buffer.ReadBool()
	return m
}

func DeserializeDevice(ctx *ngen.Context, buffer *ngen.Buffer) (m Device) {
	m.Name = buffer.ReadString()
	m.Addr = buffer.ReadString()
	if v := buffer.ReadByte(); v == 1 {
		var subSwitch = DeserializeSwitch(ctx, buffer)
		m.Switch = &subSwitch
	}
	if v := buffer.ReadByte(); v == 1 {
		var subThermostat = DeserializeThermostat(ctx, buffer)
		m.Thermostat = &subThermostat
	}
	if v := buffer.ReadByte(); v == 1 {
		var subThermometer = DeserializeThermometer(ctx, buffer)
		m.Thermometer = &subThermometer
	}
	if v := buffer.ReadByte(); v == 1 {
		var subPortal = DeserializePortal(ctx, buffer)
		m.Portal = &subPortal
	}
	if v := buffer.ReadByte(); v == 1 {
		var subMotion = DeserializeMotion(ctx, buffer)
		m.Motion = &subMotion
	}
	return m
}

func DeserializeSettings(ctx *ngen.Context, buffer *ngen.Buffer) (m Settings) {
	m.Low = buffer.ReadFloat32()
	m.High = buffer.ReadFloat32()
	tmpMode := buffer.ReadUint32()
	m.Mode = Mode(tmpMode)
	return m
}

func DeserializeTempEvent(ctx *ngen.Context, buffer *ngen.Buffer) (m TempEvent) {
	m.Name = buffer.ReadString()
	m.Time = time.Unix(int64(buffer.ReadUint64()), 0)
	m.Temp = buffer.ReadFloat32()
	m.Humidity = buffer.ReadFloat32()
	tmpState := buffer.ReadUint32()
	m.State = ControlState(tmpState)
	return m
}
