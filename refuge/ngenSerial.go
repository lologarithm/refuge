// Code generated by netgen tool on Oct 2 2019 22:02 MDT. DO NOT EDIT
package refuge

import "github.com/lologarithm/netgen/lib/ngen"

func (m Portal) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteUint32(uint32(m.State))

	return buffer.Err
}

func (m Portal) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 4 // m.State, Type: PortalState
	return mylen
}

func (m Portal) MsgType() ngen.MessageType {
	return PortalMsgType
}

func (m Thermostat) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteUint32(uint32(m.State))
	buffer.WriteFloat32(m.Target)
	m.Settings.Serialize(ctx, buffer)

	return buffer.Err
}

func (m Thermostat) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 4                      // m.State, Type: ControlState
	mylen += 4                      // m.Target, Type: float32
	mylen += m.Settings.Length(ctx) // m.Settings, Type: Settings
	return mylen
}

func (m Thermostat) MsgType() ngen.MessageType {
	return ThermostatMsgType
}

func (m Thermometer) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteFloat32(m.Temp)
	buffer.WriteFloat32(m.Humidity)

	return buffer.Err
}

func (m Thermometer) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 4 // m.Temp, Type: float32
	mylen += 4 // m.Humidity, Type: float32
	return mylen
}

func (m Thermometer) MsgType() ngen.MessageType {
	return ThermometerMsgType
}

func (m Motion) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteUint64(uint64(m.Motion))

	return buffer.Err
}

func (m Motion) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 8 // m.Motion, Type: int64
	return mylen
}

func (m Motion) MsgType() ngen.MessageType {
	return MotionMsgType
}

func (m Switch) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteBool(m.On)

	return buffer.Err
}

func (m Switch) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 1 // m.On, Type: bool
	return mylen
}

func (m Switch) MsgType() ngen.MessageType {
	return SwitchMsgType
}

func (m Device) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteString(m.Name)
	buffer.WriteString(m.Addr)
	buffer.WriteString(m.ID)
	if m.Switch != nil {
		buffer.WriteBool(true)
		m.Switch.Serialize(ctx, buffer)
	} else {
		buffer.WriteBool(false)
	}
	if m.Thermostat != nil {
		buffer.WriteBool(true)
		m.Thermostat.Serialize(ctx, buffer)
	} else {
		buffer.WriteBool(false)
	}
	if m.Thermometer != nil {
		buffer.WriteBool(true)
		m.Thermometer.Serialize(ctx, buffer)
	} else {
		buffer.WriteBool(false)
	}
	if m.Portal != nil {
		buffer.WriteBool(true)
		m.Portal.Serialize(ctx, buffer)
	} else {
		buffer.WriteBool(false)
	}
	if m.Motion != nil {
		buffer.WriteBool(true)
		m.Motion.Serialize(ctx, buffer)
	} else {
		buffer.WriteBool(false)
	}

	return buffer.Err
}

func (m Device) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 4 + len(m.Name) // m.Name, Type: string
	mylen += 4 + len(m.Addr) // m.Addr, Type: string
	mylen += 4 + len(m.ID)   // m.ID, Type: string

	mylen++ // nil check
	if m.Switch != nil {
		mylen += m.Switch.Length(ctx)
	} // m.Switch, Type: Switch

	mylen++ // nil check
	if m.Thermostat != nil {
		mylen += m.Thermostat.Length(ctx)
	} // m.Thermostat, Type: Thermostat

	mylen++ // nil check
	if m.Thermometer != nil {
		mylen += m.Thermometer.Length(ctx)
	} // m.Thermometer, Type: Thermometer

	mylen++ // nil check
	if m.Portal != nil {
		mylen += m.Portal.Length(ctx)
	} // m.Portal, Type: Portal

	mylen++ // nil check
	if m.Motion != nil {
		mylen += m.Motion.Length(ctx)
	} // m.Motion, Type: Motion
	return mylen
}

func (m Device) MsgType() ngen.MessageType {
	return DeviceMsgType
}

func (m Settings) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteFloat32(m.Low)
	buffer.WriteFloat32(m.High)
	buffer.WriteUint32(uint32(m.Mode))

	return buffer.Err
}

func (m Settings) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 4 // m.Low, Type: float32
	mylen += 4 // m.High, Type: float32
	mylen += 4 // m.Mode, Type: Mode
	return mylen
}

func (m Settings) MsgType() ngen.MessageType {
	return SettingsMsgType
}

func (m TempEvent) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteString(m.Name)
	buffer.WriteUint64(uint64(m.Time.Unix()))
	buffer.WriteFloat32(m.Temp)
	buffer.WriteFloat32(m.Humidity)
	buffer.WriteUint32(uint32(m.State))

	return buffer.Err
}

func (m TempEvent) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 4 + len(m.Name) // m.Name, Type: string
	mylen += 8               // m.Time, Type: time.Time
	mylen += 4               // m.Temp, Type: float32
	mylen += 4               // m.Humidity, Type: float32
	mylen += 4               // m.State, Type: ControlState
	return mylen
}

func (m TempEvent) MsgType() ngen.MessageType {
	return TempEventMsgType
}
