// Code generated by netgen tool on Jul 17 2019 00:13 MDT. DO NOT EDIT
package rnet

import (
	"github.com/lologarithm/netgen/lib/ngen"
	"gitlab.com/lologarithm/refuge/refuge"
)


var Context = &ngen.Context {
		FieldVersions: map[ngen.MessageType][]byte{
			
		},
		Read: Read,
	}
const (
	ListenerMsgType = 1827296884
	MsgMsgType = 1355225423
	PingMsgType = 2246546115
)

// Read accepts input of raw bytes and a type. Parses and returns a message.
func Read(ctx *ngen.Context, msgType ngen.MessageType, content *ngen.Buffer) ngen.Message {
	switch msgType {
		case ngen.MessageTypeContext:
			return ngen.DeserializeContext(&ngen.Context{Read: Read}, content)
	case ListenerMsgType:
			msg := DeserializeListener(ctx, content)
			return &msg
	case MsgMsgType:
			msg := DeserializeMsg(ctx, content)
			return &msg
	case PingMsgType:
			msg := DeserializePing(ctx, content)
			return &msg

		default:
			return nil
	}
}

func DeserializeListener(ctx *ngen.Context, buffer *ngen.Buffer) (m Listener) {
	m.AddrStr = buffer.ReadString()
	m.LastPing = buffer.ReadInt64()
	return m
}

func DeserializeMsg(ctx *ngen.Context, buffer *ngen.Buffer) (m Msg) {
	if v := buffer.ReadByte(); v == 1 {
		var subDevice = refuge.DeserializeDevice(ctx, buffer)
		m.Device = &subDevice
	}
	return m
}

func DeserializePing(ctx *ngen.Context, buffer *ngen.Buffer) (m Ping) {
	return m
}
