// Code generated by netgen tool on Jul 17 2019 00:13 MDT. DO NOT EDIT
package rnet

import "github.com/lologarithm/netgen/lib/ngen"

func (m Listener) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	buffer.WriteString(m.AddrStr)
	buffer.WriteUint64(uint64(m.LastPing))

	return buffer.Err
}

func (m Listener) Length(ctx *ngen.Context) int {
	mylen := 0
	mylen += 4 + len(m.AddrStr) // m.AddrStr, Type: string
	mylen += 8 // m.LastPing, Type: int64
	return mylen
}

func (m Listener) MsgType() ngen.MessageType {
	return ListenerMsgType
}



func (m Msg) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {
	if m.Device != nil {
					buffer.WriteBool(true)
	m.Device.Serialize(ctx, buffer)
} else {
	buffer.WriteBool(false)
}

	return buffer.Err
}

func (m Msg) Length(ctx *ngen.Context) int {
	mylen := 0
	
	mylen++ // nil check 
	if m.Device != nil {
	mylen += m.Device.Length(ctx)
	} // m.Device, Type: refuge.Device
	return mylen
}

func (m Msg) MsgType() ngen.MessageType {
	return MsgMsgType
}



func (m Ping) Serialize(ctx *ngen.Context, buffer *ngen.Buffer) error {

	return buffer.Err
}

func (m Ping) Length(ctx *ngen.Context) int {
	mylen := 0
	return mylen
}

func (m Ping) MsgType() ngen.MessageType {
	return PingMsgType
}

